# AI Scientist v2 Secrets Template
# NOTE: This file contains template secrets. In production:
# 1. Replace all placeholder values with actual secrets
# 2. Use external secret management (Vault, AWS Secrets Manager, etc.)
# 3. Apply using: kubectl apply -f secrets.yaml
# 4. Never commit actual secrets to git

apiVersion: v1
kind: Secret
metadata:
  name: ai-scientist-secrets
  namespace: ai-scientist
  labels:
    app.kubernetes.io/name: ai-scientist
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: ai-scientist-platform
type: Opaque
stringData:
  # API Keys (REQUIRED - Replace with actual values)
  ANTHROPIC_API_KEY: "sk-ant-your-anthropic-api-key-here"
  OPENAI_API_KEY: "sk-your-openai-api-key-here"
  
  # Database credentials
  DATABASE_URL: "postgresql://ai_scientist:secure_password_here@postgres:5432/ai_scientist_db"
  POSTGRES_USER: "ai_scientist"
  POSTGRES_PASSWORD: "secure_password_here"
  POSTGRES_DB: "ai_scientist_db"
  
  # Redis credentials
  REDIS_URL: "redis://:redis_password_here@ai-scientist-redis:6379/0"
  REDIS_PASSWORD: "redis_password_here"
  
  # JWT and encryption keys
  JWT_SECRET_KEY: "your-super-secret-jwt-key-here-make-it-long-and-random"
  ENCRYPTION_KEY: "your-32-byte-encryption-key-here-exactly-32-chars"
  SECRET_KEY: "your-django-style-secret-key-here"
  
  # External service credentials
  GITHUB_TOKEN: "ghp_your_github_token_here"
  DOCKER_REGISTRY_USERNAME: "your_registry_username"
  DOCKER_REGISTRY_PASSWORD: "your_registry_password"
  
  # SSL/TLS certificates (if not using cert-manager)
  TLS_CERT: |
    -----BEGIN CERTIFICATE-----
    # Your SSL certificate here
    -----END CERTIFICATE-----
  TLS_KEY: |
    -----BEGIN PRIVATE KEY-----
    # Your SSL private key here
    -----END PRIVATE KEY-----
  
  # Monitoring credentials
  GRAFANA_ADMIN_PASSWORD: "secure_grafana_password"
  PROMETHEUS_WEB_PASSWORD: "secure_prometheus_password"
  ALERTMANAGER_PASSWORD: "secure_alertmanager_password"
  
  # Cloud provider credentials (choose one)
  # AWS
  AWS_ACCESS_KEY_ID: "AKIA..."
  AWS_SECRET_ACCESS_KEY: "your_aws_secret_key"
  AWS_DEFAULT_REGION: "us-west-2"
  
  # Google Cloud
  GOOGLE_APPLICATION_CREDENTIALS: |
    {
      "type": "service_account",
      "project_id": "your-project-id",
      "private_key_id": "key-id",
      "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n",
      "client_email": "service-account@your-project.iam.gserviceaccount.com",
      "client_id": "...",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }
  
  # Azure
  AZURE_CLIENT_ID: "your-azure-client-id"
  AZURE_CLIENT_SECRET: "your-azure-client-secret"
  AZURE_TENANT_ID: "your-azure-tenant-id"
  
  # Additional service credentials
  SMTP_PASSWORD: "your_smtp_password"
  WEBHOOK_SECRET: "your_webhook_secret"
  
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: ai-scientist
  labels:
    app.kubernetes.io/name: ai-scientist
    app.kubernetes.io/component: registry-auth
    app.kubernetes.io/part-of: ai-scientist-platform
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "your-registry.com": {
          "username": "your_username",
          "password": "your_password",
          "email": "your_email@domain.com",
          "auth": "base64_encoded_username:password"
        },
        "ghcr.io": {
          "username": "your_github_username",
          "password": "your_github_token",
          "email": "your_email@domain.com",
          "auth": "base64_encoded_username:token"
        }
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: ai-scientist
  labels:
    app.kubernetes.io/name: ai-scientist
    app.kubernetes.io/component: tls
    app.kubernetes.io/part-of: ai-scientist-platform
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
stringData:
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # Your SSL certificate chain here
    # This should include both the server certificate and intermediate CA certificates
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # Your SSL private key here
    -----END PRIVATE KEY-----

---
# External Secrets Operator integration (if using)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: ai-scientist
spec:
  provider:
    vault:
      server: "https://vault.yourdomain.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "ai-scientist"
          serviceAccountRef:
            name: "ai-scientist"

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ai-scientist-external-secrets
  namespace: ai-scientist
spec:
  refreshInterval: 300s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: ai-scientist-vault-secrets
    creationPolicy: Owner
  data:
  - secretKey: ANTHROPIC_API_KEY
    remoteRef:
      key: ai-scientist/api-keys
      property: anthropic_api_key
  - secretKey: OPENAI_API_KEY
    remoteRef:
      key: ai-scientist/api-keys
      property: openai_api_key
  - secretKey: DATABASE_URL
    remoteRef:
      key: ai-scientist/database
      property: url
  - secretKey: REDIS_PASSWORD
    remoteRef:
      key: ai-scientist/redis
      property: password