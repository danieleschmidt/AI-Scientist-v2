# AI Scientist v2 Production Docker Compose Template
# Use this for standalone deployments without Kubernetes

version: '3.8'

services:
  # Main AI Scientist Application
  ai-scientist:
    image: ${REGISTRY:-your-registry.com}/ai-scientist:${TAG:-latest}
    container_name: ai-scientist-app
    restart: unless-stopped
    
    environment:
      # Application settings
      - DEPLOYMENT_MODE=production
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=false
      
      # API Keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # Database connections
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL:-postgresql://ai_scientist:${POSTGRES_PASSWORD}@postgres:5432/ai_scientist}
      
      # Resource limits
      - MAX_MEMORY_USAGE=85
      - MAX_CPU_USAGE=90
      - WORKERS=4
      
    ports:
      - "8000:8000"  # Main application
      - "8080:8080"  # Metrics
      
    volumes:
      - ai_scientist_data:/app/data
      - ai_scientist_logs:/app/logs
      - ai_scientist_experiments:/app/experiments
      - ai_scientist_cache:/app/cache
      
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD", "python", "/app/scripts/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: false  # App needs some writable areas
    user: "1001:1001"
    
    networks:
      - ai-scientist-network
      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-scientist.rule=Host(`${DOMAIN:-ai-scientist.localhost}`)"
      - "traefik.http.routers.ai-scientist.tls=true"
      - "traefik.http.routers.ai-scientist.tls.certresolver=letsencrypt"
      - "traefik.http.services.ai-scientist.loadbalancer.server.port=8000"

  # Worker Processes
  ai-scientist-worker:
    image: ${REGISTRY:-your-registry.com}/ai-scientist:${TAG:-latest}
    restart: unless-stopped
    
    command: ["python", "-m", "ai_scientist.distributed_computing_engine", "--worker"]
    
    environment:
      - WORKER_MODE=true
      - WORKER_CONCURRENCY=2
      - REDIS_URL=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      - ai_scientist_data:/app/data:ro
      - worker_cache:/app/cache
      - worker_logs:/app/logs
      
    depends_on:
      redis:
        condition: service_healthy
        
    deploy:
      replicas: ${WORKER_REPLICAS:-3}
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1001:1001"
    
    networks:
      - ai-scientist-network

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: ai-scientist-redis
    restart: unless-stopped
    
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
      
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
      
    volumes:
      - redis_data:/data
      - ./deployment/configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
      
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
          
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    
    networks:
      - ai-scientist-network

  # PostgreSQL Database (Optional)
  postgres:
    image: postgres:15-alpine
    container_name: ai-scientist-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=ai_scientist
      - POSTGRES_USER=ai_scientist
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_scientist -d ai_scientist"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          
    security_opt:
      - no-new-privileges:true
    user: "70:70"  # postgres user
    
    networks:
      - ai-scientist-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-scientist-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      
    ports:
      - "127.0.0.1:9090:9090"
      
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/monitoring/alerting-rules.yml:/etc/prometheus/rules/alerts.yml:ro
      - prometheus_data:/prometheus
      
    depends_on:
      - ai-scientist
      
    networks:
      - ai-scientist-network
      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.prometheus.middlewares=auth"

  grafana:
    image: grafana/grafana:latest
    container_name: ai-scientist-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN:-localhost}
      
    ports:
      - "127.0.0.1:3000:3000"
      
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana-dashboard.json:/etc/grafana/dashboards/ai-scientist.json:ro
      - ./deployment/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yml:ro
      
    depends_on:
      - prometheus
      
    networks:
      - ai-scientist-network
      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.tls=true"

  # Reverse Proxy and Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: ai-scientist-traefik
    restart: unless-stopped
    
    command:
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@yourdomain.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Traefik dashboard
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
      
    networks:
      - ai-scientist-network
      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"

  # Log aggregation (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai-scientist-elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
          
    networks:
      - ai-scientist-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai-scientist-kibana
    restart: unless-stopped
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      
    ports:
      - "127.0.0.1:5601:5601"
      
    depends_on:
      - elasticsearch
      
    networks:
      - ai-scientist-network
      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN:-localhost}`)"

  # GPU monitoring (if GPU available)
  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.1.7-3.1.4-ubuntu20.04
    container_name: ai-scientist-dcgm-exporter
    restart: unless-stopped
    
    environment:
      - DCGM_EXPORTER_LISTEN=0.0.0.0:9400
      
    ports:
      - "127.0.0.1:9400:9400"
      
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
              
    networks:
      - ai-scientist-network

# Volume definitions
volumes:
  ai_scientist_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
      
  ai_scientist_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
      
  ai_scientist_experiments:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${EXPERIMENTS_PATH:-./experiments}
      
  ai_scientist_cache:
    driver: local
    
  worker_cache:
    driver: local
    
  worker_logs:
    driver: local
    
  redis_data:
    driver: local
    
  postgres_data:
    driver: local
    
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local
    
  elasticsearch_data:
    driver: local
    
  letsencrypt_data:
    driver: local

# Network definitions
networks:
  ai-scientist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16