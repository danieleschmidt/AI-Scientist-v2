# AI Scientist v2 - Continuous Deployment Workflow Template
#
# To use this workflow:
# 1. Copy this file to .github/workflows/cd.yml
# 2. Configure deployment environments in GitHub repository settings
# 3. Add required secrets (see below)
#
# Required secrets:
# - PYPI_API_TOKEN (for PyPI releases)
# - TEST_PYPI_API_TOKEN (for test releases)
# - DOCKER_REGISTRY_TOKEN (for container registry)
# - STAGING_KUBECONFIG (for staging deployments)
# - PRODUCTION_KUBECONFIG (for production deployments)
# - SLACK_WEBHOOK_URL (optional, for notifications)
#
# This template provides:
# - Automated releases on git tags
# - Multi-environment deployments (staging/production)
# - Container image building and publishing
# - Package publishing to PyPI
# - Deployment verification and rollback capabilities

name: üöÄ Continuous Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io

jobs:
  validate:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract version and environment
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-images:
    name: üê≥ Build & Push Images
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.validate.outputs.version }}

  publish-package:
    name: üì¶ Publish Package
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build and publish package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}