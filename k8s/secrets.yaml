apiVersion: v1
kind: Secret
metadata:
  name: ai-scientist-api-keys
  namespace: ai-scientist
  labels:
    app.kubernetes.io/name: ai-scientist
    app.kubernetes.io/version: v2.0.0
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: ai-scientist-platform
  annotations:
    kubernetes.io/description: "API keys for AI Scientist external services"
type: Opaque
stringData:
  # LLM API Keys (Base64 encoded in production)
  OPENAI_API_KEY: "sk-placeholder-openai-key-here"
  ANTHROPIC_API_KEY: "sk-ant-placeholder-anthropic-key-here"
  GEMINI_API_KEY: "placeholder-gemini-key-here"
  
  # Optional API Keys
  S2_API_KEY: "placeholder-semantic-scholar-key-here"
  DEEPSEEK_API_KEY: "placeholder-deepseek-key-here"
  OPENROUTER_API_KEY: "placeholder-openrouter-key-here"
  
  # AWS Credentials (if using Bedrock)
  AWS_ACCESS_KEY_ID: "placeholder-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "placeholder-aws-secret-key"
  AWS_REGION_NAME: "us-east-1"
  
  # Redis Authentication
  REDIS_PASSWORD: "placeholder-redis-password"
  
  # Database Credentials (if using external DB)
  DATABASE_URL: "postgresql://user:password@postgres:5432/ai_scientist"

---
apiVersion: v1
kind: Secret
metadata:
  name: ai-scientist-tls
  namespace: ai-scientist
  labels:
    app.kubernetes.io/name: ai-scientist
    app.kubernetes.io/version: v2.0.0
    app.kubernetes.io/component: tls
    app.kubernetes.io/part-of: ai-scientist-platform
type: kubernetes.io/tls
data:
  # TLS certificate and key (Base64 encoded)
  # Generate with: kubectl create secret tls ai-scientist-tls --cert=tls.crt --key=tls.key
  tls.crt: LS0tLS1CRUdJTi... # Placeholder certificate
  tls.key: LS0tLS1CRUdJTi... # Placeholder private key