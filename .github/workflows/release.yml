name: üöÄ Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string
      pre_release:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Validate version format
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Check for breaking changes
      run: |
        # Check commit messages for breaking changes
        if git log --oneline HEAD~10..HEAD | grep -i "breaking\|major"; then
          echo "::warning::Breaking changes detected in recent commits"
        fi

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep
    
    - name: Run security scans
      run: |
        echo "Running security scans for release..."
        bandit -r ai_scientist/ -f json -o bandit-release.json
        safety check --json --output safety-release.json
        semgrep --config=auto ai_scientist/ --json --output semgrep-release.json
    
    - name: Check security scan results
      run: |
        # Fail if critical security issues found
        if [ -s bandit-release.json ]; then
          CRITICAL=$(jq '.results[] | select(.issue_severity == "HIGH")' bandit-release.json | wc -l)
          if [ $CRITICAL -gt 0 ]; then
            echo "::error::Critical security issues found. Cannot proceed with release."
            exit 1
          fi
        fi

  build-and-test:
    name: üß™ Build and Test
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov build twine
    
    - name: Run comprehensive tests
      run: |
        pytest tests/ -v --cov=ai_scientist --cov-report=xml --cov-fail-under=75
    
    - name: Build package
      run: |
        python -m build
        python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: dist/

  create-release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, security-scan, build-and-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: AI Scientist v2 ${{ needs.validate-release.outputs.version }}
        body: |
          ## What's Changed
          
          ${{ needs.validate-release.outputs.changelog }}
          
          ## Installation
          
          ```bash
          pip install ai-scientist-v2==${{ needs.validate-release.outputs.version }}
          ```
          
          ## Docker
          
          ```bash
          docker pull ghcr.io/terragonlabs/ai-scientist:${{ needs.validate-release.outputs.version }}
          ```
          
          ## Verification
          
          - ‚úÖ Security scans passed
          - ‚úÖ All tests passed
          - ‚úÖ Package build successful
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ needs.validate-release.outputs.version }}
        draft: false
        prerelease: ${{ github.event.inputs.pre_release || false }}
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: ai-scientist-v2-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  publish-pypi:
    name: üìö Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: github.event_name == 'push' && !contains(needs.validate-release.outputs.version, 'alpha') && !contains(needs.validate-release.outputs.version, 'beta')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        repository_url: https://upload.pypi.org/legacy/

  publish-docker:
    name: üê≥ Publish Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-documentation:
    name: üìñ Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version in documentation
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"${VERSION#v}\"/" pyproject.toml
        
        # Update version in README if needed
        if grep -q "version:" README.md; then
          sed -i "s/version: .*/version: ${VERSION}/" README.md
        fi
    
    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml README.md
        git commit -m "chore: update version to ${{ needs.validate-release.outputs.version }} [skip ci]" || exit 0
        git push

  notify-release:
    name: üì¢ Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, publish-docker]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK_URL
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "üöÄ AI Scientist v2 ${{ needs.validate-release.outputs.version }} has been released!",
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "üöÄ *AI Scientist v2 ${{ needs.validate-release.outputs.version }}* has been released!\n\n‚Ä¢ PyPI: `pip install ai-scientist-v2==${{ needs.validate-release.outputs.version }}`\n‚Ä¢ Docker: `ghcr.io/terragonlabs/ai-scientist:${{ needs.validate-release.outputs.version }}`\n‚Ä¢ Release Notes: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
              }
            }
          ]
        }' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create GitHub issue for post-release tasks
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Post-release tasks for ${{ needs.validate-release.outputs.version }}`,
            body: `## Post-release checklist for ${{ needs.validate-release.outputs.version }}
            
            - [ ] Verify PyPI package installation
            - [ ] Test Docker image functionality  
            - [ ] Update documentation website
            - [ ] Monitor for user feedback and issues
            - [ ] Plan next release milestones
            - [ ] Update project roadmap
            
            Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}`,
            labels: ['release', 'maintenance']
          })