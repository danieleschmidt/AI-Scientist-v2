name: ðŸ”’ Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  security-hardening:
    name: Security Hardening Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -r requirements.txt
    
    - name: Run Bandit security scanner
      run: |
        bandit -r ai_scientist/ -f json -o bandit-report.json
        bandit -r ai_scientist/ -f txt
    
    - name: Run Safety dependency checker
      run: |
        safety check --json --output safety-report.json
        safety check
    
    - name: Run Semgrep security scanner
      run: |
        semgrep --config=auto ai_scientist/ --json --output=semgrep-report.json
        semgrep --config=auto ai_scientist/
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t ai-scientist:security-test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ai-scientist:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Docker Scout
      if: github.event_name != 'pull_request_target'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ai-scientist:security-test
        format: sarif
        output: scout-report.sarif
    
    - name: Upload Scout scan results
      if: github.event_name != 'pull_request_target'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'scout-report.sarif'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses licensecheck
        pip install -r requirements.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical
        licensecheck
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [codeql, security-hardening, container-security, secrets-scan, license-compliance]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send security alert
      if: env.SLACK_WEBHOOK_URL
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"ðŸš¨ Security scan failed for AI Scientist v2 main branch"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}