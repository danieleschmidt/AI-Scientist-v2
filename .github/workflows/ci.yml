# AI Scientist v2 - Continuous Integration Workflow Template
# 
# To use this workflow:
# 1. Copy this file to .github/workflows/ci.yml
# 2. Ensure GitHub Actions has necessary permissions
# 3. Configure secrets in repository settings
#
# Required secrets:
# - CODECOV_TOKEN (optional, for coverage reporting)
# - TEST_PYPI_API_TOKEN (for test releases)
#
# This template provides:
# - Multi-platform testing (Ubuntu, Windows, macOS)
# - Security scanning (CodeQL, Trivy, Bandit)
# - Code quality checks (Black, Flake8, MyPy)
# - Comprehensive test suite with coverage
# - Performance benchmarking
# - Build verification and artifact generation

name: üöÄ Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Security scanning
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code quality checks
  code-quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install flake8 mypy bandit black isort
    
    - name: Run code quality checks
      run: |
        black --check ai_scientist/ tests/
        isort --check-only ai_scientist/ tests/
        flake8 ai_scientist/ tests/
        mypy ai_scientist/ --ignore-missing-imports
        bandit -r ai_scientist/

  # Test suite
  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        include:
          - os: ubuntu-latest
            python-version: "3.11"
            coverage: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Upload coverage
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: false

  # Build verification
  build:
    name: üèóÔ∏è Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build
        python -m twine check dist/*