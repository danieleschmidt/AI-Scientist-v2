# 🔄 GitHub Actions CI Template for AI Scientist v2
# 
# This template provides a comprehensive CI pipeline for Python-based AI/ML projects
# To implement: Copy this file to .github/workflows/ci.yml in your repository
#
# Required repository secrets:
# - SEMGREP_APP_TOKEN (optional, for enhanced security scanning)
# - CODECOV_TOKEN (optional, for coverage reporting)

name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  NODE_VERSION: "20"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🏗️ BUILD AND SECURITY SCANNING
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  security-scan:
    name: 🔐 Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: 🔍 Semgrep Security Analysis
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ github.repository_owner }}
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🧪 TESTING MATRIX
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  test:
    name: 🧪 Test Suite
    runs-on: ${{ matrix.os }}
    needs: security-scan
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        include:
          - os: ubuntu-latest
            python-version: "3.11"
            coverage: true
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,security,monitoring]"

      - name: 🔍 Code Quality Checks
        run: |
          black --check --diff .
          isort --check-only --diff .
          flake8 ai_scientist tests
          mypy ai_scientist

      - name: 🧪 Run Tests
        run: |
          pytest tests/ \
            --maxfail=5 \
            --tb=short \
            --strict-markers \
            ${{ matrix.coverage && '--cov=ai_scientist --cov-report=xml --cov-report=html' || '' }}
        env:
          PYTEST_XDIST_WORKER_COUNT: auto

      - name: 📊 Upload Coverage
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🏗️ BUILD AND PACKAGE
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build Package
        run: python -m build

      - name: 🔍 Check Package
        run: twine check dist/*

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🐳 CONTAINER BUILD AND SCAN
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  container:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
      packages: read
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Build Container Image
        run: |
          docker build -t ai-scientist-test:latest .

      - name: 🔍 Scan Container Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-scientist-test:latest
          format: sarif
          output: container-results.sarif

      - name: 📊 Upload Container Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: container-results.sarif

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # ✅ STATUS CHECK SUMMARY
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [security-scan, test, build, container]
    if: always()
    
    steps:
      - name: ✅ Check CI Status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.container.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ CI checks failed!"
            exit 1
          fi