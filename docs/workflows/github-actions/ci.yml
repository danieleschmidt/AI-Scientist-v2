name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds to catch integration issues
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: 1

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: Run code formatting checks
      run: |
        black --check --diff ai_scientist/ tests/
        isort --check-only --diff ai_scientist/ tests/

    - name: Run linting
      run: |
        flake8 ai_scientist/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        mypy ai_scientist/ --ignore-missing-imports

    - name: Upload code quality results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-results
        path: |
          mypy-report/
          flake8-report.txt
        retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[security]

    - name: Run Bandit security scan
      run: |
        bandit -r ai_scientist/ -f json -o bandit-report.json || true
        bandit -r ai_scientist/ -f txt

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto ai_scientist/ --json --output=semgrep-report.json || true
        semgrep --config=auto ai_scientist/

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
        retention-days: 30

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install poppler

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=ai_scientist --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      env:
        # Skip tests requiring API keys in CI
        SKIP_API_TESTS: true
      run: |
        pytest tests/integration/ -v -m "not api"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml
        retention-days: 7

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: benchmark-results.json
        retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality, test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Verify package
      run: python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ai-scientist:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ai-scientist:test python -c "import ai_scientist; print('âœ… Package imports successfully')"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [code-quality, test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[docs]

    - name: Build documentation
      run: |
        sphinx-build -b html docs/ docs/_build/html/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html/
        publish_branch: gh-pages
        enable_jekyll: false