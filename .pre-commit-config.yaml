# Pre-commit hooks configuration for AI Scientist v2
repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: ^(experiments/|aisci_outputs/|results/|cache/)
      - id: end-of-file-fixer
        exclude: ^(experiments/|aisci_outputs/|results/|cache/)
      - id: check-yaml
        exclude: ^templates/
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-json
        exclude: ^(experiments/|aisci_outputs/|results/)
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: check-toml
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-PyYAML, types-requests]
        args: [--ignore-missing-imports]

  # Security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: [-c, pyproject.toml]
        additional_dependencies: ["bandit[toml]"]

  # Python syntax upgrade
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]

  # Remove unused imports
  - repo: https://github.com/PyCQA/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables

  # Documentation formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        args: [--wrap, "88"]
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black
        exclude: ^(CHANGELOG\.md|experiments/|aisci_outputs/|results/)

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(tests/|\.env\.example)

  # Local custom hooks
  - repo: local
    hooks:
      - id: enhanced-security-check
        name: Enhanced Security Check
        entry: python
        language: system
        args:
          - -c
          - |
            import subprocess
            import sys
            import os
            
            security_issues = []
            
            # Check for dangerous functions
            dangerous_patterns = [
                ('os.popen', 'Dangerous: os.popen usage found'),
                ('shell=True', 'Warning: shell=True in subprocess calls'),
                ('eval\s*\(', 'Dangerous: eval() usage found'),
                ('exec\s*\(', 'Warning: exec() usage found'),
                ('__import__', 'Warning: dynamic imports found'),
            ]
            
            for pattern, message in dangerous_patterns:
                result = subprocess.run(['grep', '-rE', pattern, 'ai_scientist/', '--exclude-dir=__pycache__'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    security_issues.append(f"{message}:\n{result.stdout}")
            
            # Check for hardcoded secrets (basic patterns)
            secret_patterns = [
                ('sk-[a-zA-Z0-9]{32,}', 'Potential API key found'),
                ('AKIA[0-9A-Z]{16}', 'Potential AWS access key found'),
                ('password\s*=\s*["\'][^"\']{8,}', 'Hardcoded password found'),
            ]
            
            for pattern, message in secret_patterns:
                result = subprocess.run(['grep', '-rE', pattern, 'ai_scientist/', '--exclude-dir=__pycache__'], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    security_issues.append(f"{message}:\n{result.stdout}")
            
            if security_issues:
                print("üö® SECURITY ISSUES FOUND:")
                for issue in security_issues:
                    print(f"  {issue}")
                sys.exit(1)
            else:
                print('‚úÖ Enhanced security checks passed')
        files: '\.py$'
        pass_filenames: false

      - id: test-runner
        name: Run Core Tests
        entry: python
        language: system
        args:
          - -c
          - |
            import subprocess
            import sys
            
            # Run basic tests
            result = subprocess.run(['python', '-m', 'pytest', 'tests/', '-x', '--tb=short'], 
                                  capture_output=True, text=True)
            
            if result.returncode != 0:
                print("‚ùå Tests failed:")
                print(result.stdout)
                print(result.stderr)
                sys.exit(1)
            else:
                print("‚úÖ Core tests passed")
        files: '\.py$'
        pass_filenames: false

# Global exclusions for all hooks
exclude: |
  (?x)^(
    experiments/.*|
    aisci_outputs/.*|
    results/.*|
    cache/.*|
    huggingface/.*|
    final_papers/.*|
    \.git/.*|
    .*\.egg-info/.*|
    build/.*|
    dist/.*|
    __pycache__/.*
  )$

# Pre-commit CI configuration  
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
  autofix_prs: true
  autoupdate_schedule: weekly
  skip: [test-runner, enhanced-security-check]